name: Deploy Cloud Run Job

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      approve:
        description: 'I confirm publishing to Artifact Registry'
        required: true
        type: choice
        options: [no, yes]
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

env:
  PROJECT_ID: predictick-460219
  REGION: us-central1
  GCR_HOSTNAME: us-central1-docker.pkg.dev
  REPOSITORY: predictick-services
  IMAGE: predictick-service
  JOB_NAME: predictick-data-updater-task

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install tools to resolve base image digest
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Resolve immutable digest for python:3.10-slim (robust)
        shell: bash
        run: |
          set -euo pipefail
          DIGEST="$(skopeo inspect docker://docker.io/library/python:3.10-slim | jq -r '.Digest')"
          [[ -n "${DIGEST}" && "${DIGEST}" != "null" ]] || { echo "Failed to resolve digest"; exit 1; }
          echo "BASE_REF=python:3.10-slim@${DIGEST}" >> "$GITHUB_ENV"

      - name: Write config for build
        env:
          EVENT_DATES: ${{ secrets.EVENT_DATES }}
          GCP_DRIVE_CREDENTIALS: ${{ secrets.GCP_DRIVE_CREDENTIALS }}
          GCP_DRIVE_TOKEN: ${{ secrets.GCP_DRIVE_TOKEN }}
          PROJECT_ENVS: ${{ secrets.PROJECT_ENVS }}
          SYMBOLS: ${{ secrets.SYMBOLS }}
        run: |
          set -euo pipefail
          mkdir -p config/gcp
          umask 077
          printf '%s' "$EVENT_DATES"           > config/event_dates.json
          printf '%s' "$GCP_DRIVE_CREDENTIALS" > config/gcp/credentials.json
          printf '%s' "$GCP_DRIVE_TOKEN"       > config/gcp/token.json
          printf '%s' "$PROJECT_ENVS"          > .env
          printf '%s' "$SYMBOLS"               > config/symbols.json

      - name: Build container image (local tag)
        run: |
          set -euo pipefail
          LOCAL_REF="local/${{ env.IMAGE }}:${{ github.sha }}"
          docker build \
            --build-arg BASE="${BASE_REF}" \
            -t "${LOCAL_REF}" \
            .
          echo "LOCAL_REF=${LOCAL_REF}" >> "$GITHUB_ENV"

      - name: Export image as artifact
        run: |
          docker save "${LOCAL_REF}" -o image.tar
          echo "${LOCAL_REF}" > image.tag

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-image
          path: |
            image.tar
            image.tag
          if-no-files-found: error
          retention-days: 3

  publish:
    name: Push to Artifact Registry
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.approve == 'yes' }}
    environment: publish
    permissions:
      contents: read
      id-token: write   # required for WIF/OIDC
    outputs:
      image_ref: ${{ steps.out.outputs.image_ref }}

    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: built-image

      - name: Load image from tar
        run: docker load -i image.tar

      - name: Authenticate to Google Cloud (WIF/OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SA }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Enable required APIs (idempotent)
        run: |
          gcloud services enable artifactregistry.googleapis.com run.googleapis.com \
            --project "${PROJECT_ID}" --quiet

      - name: Ensure Artifact Registry repository exists (idempotent)
        run: |
          set -euo pipefail
          if ! gcloud artifacts repositories describe "${REPOSITORY}" \
              --project "${PROJECT_ID}" \
              --location "${REGION}" >/dev/null 2>&1; then
            gcloud artifacts repositories create "${REPOSITORY}" \
              --repository-format=docker \
              --location "${REGION}" \
              --description="CI images" \
              --project "${PROJECT_ID}" \
              --quiet
          fi

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker "${GCR_HOSTNAME}" --quiet

      - name: Retag & Push image
        run: |
          set -euo pipefail
          AR_REF="${GCR_HOSTNAME}/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${{ github.sha }}"
          LOCAL_REF="$(cat image.tag)"
          docker tag "${LOCAL_REF}" "${AR_REF}"
          docker push "${AR_REF}"
          echo "IMAGE_REF=${AR_REF}" >> "$GITHUB_ENV"

      - name: Set image_ref output
        id: out
        run: echo "image_ref=${IMAGE_REF}" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy Cloud Run Job
    runs-on: ubuntu-latest
    needs: [publish]
    if: ${{ needs.publish.result == 'success' }}  # only after approved publish
    environment: publish
    permissions:
      contents: read
      id-token: write   # WIF/OIDC
    steps:
      - name: Authenticate to Google Cloud (WIF/OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SA }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy/Update Cloud Run Job (idempotent)
        env:
          IMAGE_REF: ${{ needs.publish.outputs.image_ref }}
        run: |
          set -euo pipefail
          if gcloud run jobs describe "${JOB_NAME}" \
               --region "${REGION}" --project "${PROJECT_ID}" >/dev/null 2>&1; then
            gcloud run jobs update "${JOB_NAME}" \
              --image "${IMAGE_REF}" \
              --region "${REGION}" \
              --project "${PROJECT_ID}" \
              --task-timeout=1800s \
              --max-retries=0 \
              --cpu=1 --memory=1Gi
          else
            gcloud run jobs deploy "${JOB_NAME}" \
              --image "${IMAGE_REF}" \
              --region "${REGION}" \
              --project "${PROJECT_ID}" \
              --task-timeout=1800s \
              --max-retries=0 \
              --cpu=1 --memory=1Gi
          fi
